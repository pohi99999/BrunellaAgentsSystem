import os
from crewai import Agent, Task, Crew
from crewai.llms import OpenAI
from dotenv import load_dotenv

# Bet√∂lti az API kulcsot .env-b≈ël
load_dotenv()

# Qwen3 coder LLM Brunella alatt
qwen_llm = OpenAI(
    model="qwen2.5-coder-32b-instruct",
    base_url="https://dashscope.aliyuncs.com/compatible-mode/v1",
    api_key=os.getenv("OPENAI_API_KEY")
)

# === √úgyn√∂k√∂k ===
brunella = Agent(
    role="Projektmenedzser",
    goal="Feladatok deleg√°l√°sa √©s a csapat koordin√°l√°sa",
    backstory="Brunella, a menedzser, aki a t√∂bbiek munk√°j√°t √∂sszefogja.",
    llm=qwen_llm
)

researcher = Agent(
    role="Kutat√≥ √ºgyn√∂k",
    goal="Gy≈±jts inform√°ci√≥t AI architekt√∫r√°kr√≥l",
    backstory="Tapasztalt AI kutat√≥.",
    llm=qwen_llm
)

coder = Agent(
    role="K√≥dol√≥ √ºgyn√∂k",
    goal="√çrjon tiszta √©s m≈±k√∂d≈ë k√≥dot",
    backstory="Senior Python fejleszt≈ë.",
    llm=qwen_llm
)

qa = Agent(
    role="Min≈ës√©gellen≈ër",
    goal="Ellen≈ërizze a k√≥d min≈ës√©g√©t",
    backstory="Szoftvertesztel≈ë specialista.",
    llm=qwen_llm
)

# === Feladatok ===
research_task = Task(
    description="Gy≈±jts inform√°ci√≥t a FastAPI alap√∫ √ºgyn√∂k architekt√∫r√°kr√≥l.",
    expected_output="Egy r√∂vid √∂sszefoglal√≥ a legfontosabb architekt√∫r√°kr√≥l.",
    agent=researcher
)

coding_task = Task(
    description="√çrj egy FastAPI endpointot, ami visszaadja a fut√≥ √ºgyn√∂k√∂k list√°j√°t.",
    expected_output="Egy m≈±k√∂d≈ë FastAPI Python k√≥d.",
    agent=coder
)

qa_task = Task(
    description="Ellen≈ërizd a k√≥d min≈ës√©g√©t √©s adj visszajelz√©st.",
    expected_output="Egy √©rt√©kel√©s a k√≥d strukt√∫r√°j√°r√≥l √©s tesztelhet≈ës√©g√©r≈ël.",
    agent=qa
)

# === Crew √∂ssze√°ll√≠t√°sa ===
crew = Crew(
    agents=[brunella, researcher, coder, qa],
    tasks=[research_task, coding_task, qa_task],
    verbose=True
)

# === Workflow futtat√°s ===
if __name__ == "__main__":
    result = crew.kickoff()
    print("\nüöÄ V√©gs≈ë eredm√©ny:\n", result)
